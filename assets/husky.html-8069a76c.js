import{_ as l,r as i,o,c as r,a as s,b as n,d as t,e}from"./app-1eb51437.js";const u={},c=s("h1",{id:"husky-lint-staged-规范-git-代码递交",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#husky-lint-staged-规范-git-代码递交","aria-hidden":"true"},"#"),n(" husky + lint-staged 规范 git 代码递交")],-1),d=s("blockquote",null,[s("p",null,[s("strong",null,"相关内容："),s("br"),n(" husky: 可在 git 操作时添加自定义钩子对代码或 git message 进行校验"),s("br"),n(" lint-staged: 可对 git 缓存区代码进行 es-lint 检查")])],-1),p=e(`<p>安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> husky lint-staged <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),m=s("p",null,[s("strong",null,"❗注意："),n(" lint-staged 从 v12.0.0 开始模块导出为 ESM module 所以 node 版本不能低于 12.20.0, 14.13.1, or 16.0.0 如需支持低版本需固定版本号。执行"),s("code",null,"npm install lint-staged@^11.2.6 -D")],-1),h={href:"https://nodejs.org/api/esm.html#introduction",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>package.json 添加 script</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> set-script prepare <span class="token string">&quot;husky install&quot;</span>
<span class="token function">npm</span> run prepare
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者 手动添加以 <code>&quot;prepare&quot;: &quot;husky install&quot;</code> 到 package.json 的 scripts 中并执行 <code>npm run prepare</code> 命令</p>`,3),b=s("p",null,[s("strong",null,"❗提示："),n(" prepare: 在两种情况前运行，一是 npm publish 命令前，二是不带参数的 npm install 命令；它会在 prepublish 之后、prepublishOnly 之前执行")],-1),g={href:"https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html",target:"_blank",rel:"noopener noreferrer"},k=e(`<li><p>创建 .lintstagedrc 文件</p><blockquote><p>该文件为暂存区内所有符合对应后缀提供对应的规则命令</p></blockquote><div class="language-JSON line-numbers-mode" data-ext="JSON"><pre class="language-JSON"><code>{
 &quot;*.{js,jsx,ts,tsx,vue}&quot;: [&quot;eslint&quot;, &quot;prettier --write&quot;],
 &quot;*.{less,scss}&quot;: &quot;prettier --write&quot;,
 &quot;*.{js,css,json,md}&quot;: [&quot;prettier --write&quot;]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在.husky 文件夹下新建 pre-commit.sh 文件，并添加一下内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

 <span class="token comment"># 这里就是唤醒 lint-staged</span>
 npx lint-staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2);function _(q,f){const a=i("ExternalLinkIcon");return o(),r("div",null,[c,d,s("ol",null,[s("li",null,[p,s("blockquote",null,[m,s("ul",null,[s("li",null,[n("ESM module 相关可参考 "),s("a",h,[n("node 文档"),t(a)])])])])]),s("li",null,[v,s("blockquote",null,[b,s("ul",null,[s("li",null,[n("相关内容参考 "),s("a",g,[n("npm scripts 使用指南"),t(a)])])])])]),k])])}const y=l(u,[["render",_],["__file","husky.html.vue"]]);export{y as default};
